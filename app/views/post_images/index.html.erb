<!--20章 共通化で切り取りした↓-->

<!--% @post_images.each do |post_image| %> <!--コントローラから渡された@post_images変数内から1つずつ取り出して、post_image変数へ格納します。-->
<!--  <div>-->
<!--    %= link_to post_image_path(post_image.id) do %> <!--link_toでは、doからendの間が、aタグで囲まれた状態になります。 結果、image_tagは、aタグに囲まれたimgタグになります。-->
<!--      %= image_tag post_image.get_image %> <!--image_tagを使いpost_imageにActiveStorageで設定したimageを表示しています。-->
<!--    % end %>-->
<!--                                            post_image.get_imageの部分はPostImageモデル内に記述したメソッドを呼び出しています。-->
<!--    <p>投稿ユーザー画像：%= image_tag post_image.user.get_profile_image(100,100) %></p> <!--17章で編集済み(post_image.user.get_profile_imageと記述することで、投稿画像に紐づいたユーザーのプロフィール画像を表示できる)-->
                                                                   <!--1章【アプリケーションを作成・準備しよう】 > 画像を用意 でダウンロードした画像を使用します。-->
<!--    <p>ショップ名：%= post_image.shop_name %></p> <!--post_image変数のshop_nameカラムを表示します。 このカラムは、post_imageモデルに定義されています。-->
<!--    <p>説明：%= post_image.caption %></p> <!--post_image変数のcaptionカラムを表示します。 このカラムも、post_imageモデルに定義されています。-->
<!--    <p>ユーザーネーム：%= post_image.user.name %></p> <!--post_image変数のuser_idに関連付けられているuserモデルのnameカラムを表示します。 同様にこのカラムも、post_imageモデルに定義されています。-->
                                                       <!--実は、nameカラム以外にも、ユーザーモデルにカラムとして定義されている情報であれば取得できます。-->
                                                       <!--※アソシエーションによるデータの関連付けを行っているため-->
<!--    <p>%= link_to "#{post_image.post_comments.count} コメント", post_image_path(post_image.id) %></p> <!--18章 コメント件数表示-->
<!--  </div>-->
<!--% end %-->

<%= render 'list', post_images: @post_images %> <!--20章 部分テンプレートの呼び出し！！-->